import streamlit as st
import pandas as pd
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go

def render():
    st.title("üìÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏û.‡∏®. 2563 - 2567)")

    # -------- 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• --------
    index = [
        "10 ‡∏ö‡∏≤‡∏ó", "5 ‡∏ö‡∏≤‡∏ó", "2 ‡∏ö‡∏≤‡∏ó", "1 ‡∏ö‡∏≤‡∏ó", "50 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "25 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå",
        "10 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "5 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "1 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "‡∏£‡∏ß‡∏°"
    ]

    columns = pd.MultiIndex.from_product(
        [["2563", "2564", "2565", "2566", "2567"], ["‡∏£‡∏ß‡∏°", "‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏≠‡∏á", "‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤"]],
        names=["‡∏õ‡∏µ", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]
    )

    data_values = [
        [145.0, 145.0, 0.0, 155.0, 155.0, 0.0, 50.0, 50.0, 0.0, 55.0, 55.0, 0.0, 40.0, 40.0, 0.0],
        [270.0, 270.0, 0.0, 275.0, 275.0, 0.0, 190.0, 190.0, 0.0, 145.0, 145.0, 0.0, 95.0, 95.0, 0.0],
        [205.0, 205.0, 0.0, 40.0, 40.0, 0.0, 10.0, 10.0, 0.0, 35.0, 35.0, 0.0, 10.0, 10.0, 0.0],
        [850.0, 370.0, 480.0, 460.35, 300.35, 160.0, 885.0, 25.0, 860.0, 620.0, 140.0, 480.0, 505.0, 40.0, 465.0],
        [100.0, 0.0, 100.0, 50.0, 0.0, 50.0, 150.0, 0.0, 150.0, 300.0, 0.0, 300.0, 210.0, 0.0, 210.0],
        [200.0, 0.0, 200.0, 200.0, 0.0, 200.0, 375.0, 0.0, 375.0, 100.0, 0.0, 100.0, 510.0, 0.0, 510.0],
        [0.05, 0.05, 0.0, 0.05, 0.05, 0.0, 0.05, 0.05, 0.0, 0.05, 0.05, 0.0, 0.05, 0.05, 0.0],
        [0.05, 0.05, 0.0, 0.05, 0.05, 0.0, 0.05, 0.05, 0.0, 0.05, 0.05, 0.0, 0.05, 0.05, 0.0],
        [0.05, 0.05, 0.0, 0.05, 0.05, 0.0, 0.05, 0.05, 0.0, 0.05, 0.05, 0.0, 0.05, 0.05, 0.0],
        [1770.15, 990.15, 780.0, 1180.5, 770.5, 410.0, 1660.15, 275.15, 1385.0, 1255.15, 375.15, 880.0, 1370.15, 185.15, 1185.0]
    ]


    # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°‡πÑ‡∏ß‡πâ
    df_full = pd.DataFrame(data_values, index=index, columns=columns)
    df_full.index.name = "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏° "‡∏£‡∏ß‡∏°")
    df_long_all = df_full.stack(level=[0, 1]).reset_index()
    df_long_all.columns = ["‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤", "‡∏õ‡∏µ", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]

    # ‚úÖ ‡∏ï‡∏±‡∏î "‡∏£‡∏ß‡∏°" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    df_plot = df_long_all[df_long_all["‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"] != "‡∏£‡∏ß‡∏°"].copy()

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    import plotly.graph_objects as go
    from plotly.subplots import make_subplots

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df_clean = df_plot.query("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó != '‡∏£‡∏ß‡∏°'").copy()
    df_clean["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"] = pd.to_numeric(df_clean["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"], errors="coerce").fillna(0)

    # ‚úÖ ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
    price_order = [
        "10 ‡∏ö‡∏≤‡∏ó", "5 ‡∏ö‡∏≤‡∏ó", "2 ‡∏ö‡∏≤‡∏ó", "1 ‡∏ö‡∏≤‡∏ó",
        "50 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "25 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå",
        "10 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "5 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "1 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå"
    ]
    df_clean["‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"] = pd.Categorical(df_clean["‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"], categories=price_order, ordered=True)

    # ‚úÖ ‡∏õ‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    years = sorted(df_clean["‡∏õ‡∏µ"].unique())
    color_map = {"‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏≠‡∏á": "#2ECC71", "‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤": "#E74C3C"}

    # ‚úÖ ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÅ‡∏Å‡∏ô X ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ +10%
    xaxis_ranges = {}
    for year in years:
        max_val = df_clean[df_clean["‡∏õ‡∏µ"] == year]["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].max()
        xaxis_ranges[year] = max_val * 1.1  # ‡∏Ç‡∏¢‡∏≤‡∏¢ 10%

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á subplot: 1 ‡πÅ‡∏ñ‡∏ß ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏ï‡∏≤‡∏°‡∏õ‡∏µ)
    fig = make_subplots(
        rows=1, cols=len(years),
        subplot_titles=years,
        shared_yaxes=True,
        horizontal_spacing=0.04
    )

    # ‚úÖ ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÇ‡∏î‡∏¢‡πÅ‡∏™‡∏î‡∏á legend ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 2 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
    trace_count = 0

    for i, year in enumerate(years):
        col = i + 1
        df_year = df_clean[df_clean["‡∏õ‡∏µ"] == year]
        
        for category in ["‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏≠‡∏á", "‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤"]:
            df_cat = df_year[df_year["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] == category]

            show_legend = trace_count < 2
            trace_count += 1

            fig.add_trace(
                go.Bar(
                    x=df_cat["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"],
                    y=df_cat["‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"],
                    name=category,
                    showlegend=show_legend,
                    orientation="h",
                    marker_color=color_map[category],
                    text=[f"{v:,.2f}" for v in df_cat["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]],
                    textposition="outside",
                    insidetextanchor="start",
                    hovertemplate="‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤: %{y}<br>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: %{x:,.2f} ‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç<br>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: "+category+"<extra></extra>"
                ),
                row=1, col=col
            )

    # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï X ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ subplot ‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
    for i, year in enumerate(years):
        fig.update_xaxes(
            range=[0, xaxis_ranges[year]],
            row=1, col=i+1,
            showgrid=True,
            showticklabels=True
        )

    # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö Y-axis (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å 10 ‡∏ö‡∏≤‡∏ó ‡∏•‡∏á‡∏°‡∏≤)
    fig.update_yaxes(
        autorange="reversed",
        showgrid=True,
        showticklabels=True
    )

    # ‚úÖ Layout
    fig.update_layout(
        height=900,
        title_text="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ",
        showlegend=True,
        barmode="group",
        uniformtext_minsize=8,
        uniformtext_mode='hide',
        margin=dict(t=80, l=60, r=20, b=40)
    )

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    st.plotly_chart(fig, use_container_width=True)

    with st.expander("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü)", expanded=False):
        df_table = df_clean.sort_values(by=["‡∏õ‡∏µ", "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"])
        st.dataframe(df_table, use_container_width=True)
        
        st.download_button(
            "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏µ‡πâ (CSV)",
            df_table.to_csv(index=False).encode("utf-8-sig"),
            file_name="production_by_year_table.csv",
            mime="text/csv"
        )

    data3 = {
    "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤": ["10 ‡∏ö‡∏≤‡∏ó", "5 ‡∏ö‡∏≤‡∏ó", "2 ‡∏ö‡∏≤‡∏ó", "1 ‡∏ö‡∏≤‡∏ó", "50 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "25 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "10 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "5 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "1 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "‡∏£‡∏ß‡∏°"],
    "‡πÅ‡∏ú‡∏ô‡∏£‡∏ß‡∏°": [30.0, 70.0, 10.0, 680.0, 40.0, 70.0, 0.05, 0.05, 0.05, 900.15],
    "‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏≠‡∏á": [30.0, 70.0, 10.0, 680.0, 0.0, 0.0, 0.05, 0.05, 0.05, 790.15],
    "‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®": [0.0, 0.0, 0.0, 0.0, 40.0, 70.0, 0.0, 0.0, 0.0, 110.0],
    "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠": [129.7752, 189.5783, 103.0135, 1421.4735, 0.0, 0.0, 0.0, 0.0, 0.0, 1843.8405],
    "‡∏Ñ‡πâ‡∏≤‡∏á‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤": [0.0, 60.0, 0.0, 61.25, 0.0, 0.0, 0.0, 0.0, 0.0, 121.25],
    "‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï - ‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏≠‡∏á": [4.2, 69.95, 1.0, 287.4, 0.0, 0.0, 0.0, 0.0, 0.0, 362.55],
    "‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï - ‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å ‡∏ï‡∏õ‡∏ó.": [0.0, 0.0, 0.0, 0.0, 100.0, 100.0, 0.0, 0.0, 0.0, 200.0],
    "‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏°": [4.2, 69.95, 1.0, 287.4, 100.0, 100.0, 0.0, 0.0, 0.0, 562.55],
    "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï": ["14.00%", "99.93%", "10.00%", "42.26%", "250.00%", "142.86%", "0.00%", "0.00%", "0.00%", "62.50%"]
}

    df3 = pd.DataFrame(data3)


    # --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• df3 ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ ---
    # ‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á
    df3 = df3[df3["‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"] != "‡∏£‡∏ß‡∏°"]
    df3 = df3[::-1]  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å 1 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå ‡πÑ‡∏õ 10 ‡∏ö‡∏≤‡∏ó

    # --- ‡∏Å‡∏£‡∏≤‡∏ü bar group ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï ---
    fig_plan = px.bar(df3,
                    x="‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤",
                    y=["‡πÅ‡∏ú‡∏ô‡∏£‡∏ß‡∏°", "‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏≠‡∏á", "‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®"],
                    title="‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤",
                    labels={"value": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)", "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤": "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"},
                    barmode="group",
                    text_auto=True)

    # --- Pie chart ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏≠‡∏á vs ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ ---
    total_self = df3["‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏≠‡∏á"].sum()
    total_import = df3["‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®"].sum()
    total_plan = total_self + total_import

    fig_pie = px.pie(
        names=["‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏≠‡∏á", "‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®"],
        values=[total_self, total_import],
        title=f"‡∏£‡∏ß‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_plan:,.2f} ‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç",
        hole=0.4
    )
    fig_pie.update_traces(
        textinfo='label+percent+value',
        textfont_size=16
    )

    # --- ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô ---
    col__1, col__2 = st.columns([2, 1])
    with col__1:
        st.plotly_chart(fig_plan, use_container_width=True)


    with col__2:
        st.plotly_chart(fig_pie, use_container_width=True)
    with st.expander("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ", expanded=False):
        st.dataframe(df3, use_container_width=True)
        
        st.download_button(
            "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏µ‡πâ (CSV)",
            df3.to_csv(index=False).encode("utf-8-sig"),
            file_name="coin_production_plan.csv",
            mime="text/csv"
        )


    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏†‡∏≤‡∏û
    data2 = {
        "‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": ["‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï", "‡∏ï.‡∏Ñ. 66", "‡∏û.‡∏¢. 66", "‡∏ò.‡∏Ñ. 66", "‡∏°.‡∏Ñ. 67", "‡∏Å.‡∏û. 67", "‡∏°‡∏µ.‡∏Ñ. 67",
                    "‡πÄ‡∏°.‡∏¢. 67", "‡∏û.‡∏Ñ. 67", "‡∏°‡∏¥.‡∏¢. 67", "‡∏Å.‡∏Ñ. 67", "‡∏™.‡∏Ñ. 67", "‡∏Å.‡∏¢. 67",
                    "‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï", "‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"],

        "10 ‡∏ö‡∏≤‡∏ó": [30.00, 0.30, None, None, None, 3.90, None, None, None, None, None, None, None,
                    4.20, "14.00%", "86.00%", 129.78],

        "5 ‡∏ö‡∏≤‡∏ó": [70.00, 5.40, 1.40, 15.80, 22.20, 12.40, 10.00, None, None, None, None, None, None,
                67.20, "96.00%", "4.00%", 249.92],

        "2 ‡∏ö‡∏≤‡∏ó": [10.00, None, None, None, None, None, None, None, None, None, None, None, None,
                None, "0.00%", "100.00%", 104.37],

        "1 ‡∏ö‡∏≤‡∏ó": [680.00, 52.80, 58.00, 32.60, 46.60, 36.60, 49.80, None, None, None, None, None, None,
                276.40, "40.65%", "59.35%", 1492.37],

        "50 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå": [40.00, None, 50.00, None, None, 50.00, None, None, None, None, None, None, None,
                    100.00, "250.00%", "0.00%", 0.00],

        "25 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå": [70.00, None, None, None, 50.00, None, 50.00, None, None, None, None, None, None,
                    100.00, "142.86%", "0.00%", 0.00],

        "10 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå": [0.05, None, None, None, None, None, None, None, None, None, None, None, None,
                    None, "0.00%", "100.00%", 0.00],

        "5 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå": [0.05, None, None, None, None, None, None, None, None, None, None, None, None,
                    None, "0.00%", "100.00%", 0.00],

        "1 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå": [0.05, None, None, None, None, None, None, None, None, None, None, None, None,
                    None, "0.00%", "100.00%", 0.00]
    }

    df_plan2 = pd.DataFrame(data2)

    st.title("üìà ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Å‡∏©‡∏≤‡∏õ‡∏ì‡πå")
    col_1,_,col_2 = st.columns([2,0.5,2])
    with col_1:
        # --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
        df_real = df_plan2.iloc[1:13].copy()
        df_real["‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] = df_real["‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].astype(str)

        coin_types = df_plan2.columns[1:]
        df_real[coin_types] = df_real[coin_types].fillna(0)
        df_header = df_plan2.iloc[0]

        # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü ---
        fig = go.Figure()

        for coin in coin_types:
            df_real_coin = df_real[["‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", coin]].copy()
            df_real_coin[coin] = df_real_coin[coin].astype(float)

            for i, row in df_real_coin.iterrows():
                fig.add_trace(go.Bar(
                    y=[coin],
                    x=[row[coin]],
                    name=row["‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"],
                    orientation='h',
                    legendgroup=row["‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"],
                    showlegend=(coin == coin_types[0])  # ‡πÅ‡∏™‡∏î‡∏á legend ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                ))

            # üî¥ ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ú‡∏ô
            plan_value = float(df_header[coin])
            y_index = list(coin_types).index(coin)

            fig.add_shape(
                type="line",
                x0=plan_value, x1=plan_value,
                y0=y_index - 0.4, y1=y_index + 0.4,
                line=dict(color="red", width=2, dash="dash")
            )

            # üè∑Ô∏è Label ‡πÅ‡∏ú‡∏ô
            fig.add_annotation(
                x=plan_value,
                y=coin,
                text=f"‡πÅ‡∏ú‡∏ô: {plan_value:.2f} ‡∏•‡πâ‡∏≤‡∏ô",
                showarrow=False,
                font=dict(color="red", size=12),
                xanchor="left",
                yshift=10
            )

        # --- ‡∏õ‡∏£‡∏±‡∏ö Layout ---
        fig.update_layout(
            barmode='stack',
            title="üìå ‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏∞‡∏™‡∏°‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï",
            xaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)",
            yaxis_title="‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤",
            height=600 + len(coin_types) * 25,
            legend_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
        )

        # --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---
        st.plotly_chart(fig, use_container_width=True)

        # --- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö ---
        # st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)")
        # st.dataframe(df_real, use_container_width=True)

        # st.subheader("üìà ‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å row 14 ‡πÅ‡∏•‡∏∞ 15
        percent_success = df_plan2.iloc[14][1:]
        percent_remaining = df_plan2.iloc[15][1:]

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float
        percent_success = percent_success.str.replace('%', '').astype(float)
        percent_remaining = percent_remaining.str.replace('%', '').astype(float)

        fig_percent = go.Figure(data=[
            go.Bar(name='‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)', x=coin_types, y=percent_success),
            go.Bar(name='‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ (%)', x=coin_types, y=percent_remaining)
        ])

        fig_percent.update_layout(
            barmode='group',
            title="üìä ‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
            yaxis_title="‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)",
            height=500
        )

        # st.plotly_chart(fig_percent, use_container_width=True)


    with col_2:
        st.subheader("üí∞ ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)")

        # ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å row 16
        reserve = df_plan2.iloc[16][1:].astype(float)

        cols = st.columns(3)

        for i, coin in enumerate(coin_types):
            with cols[i % 3]:
                value = f"{reserve[coin]:,.2f} ‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"
                st.markdown(f"""
                    <div style="background-color: #f0f2f6; padding: 20px; border-radius: 15px;
                                box-shadow: 2px 2px 10px rgba(0,0,0,0.1); text-align: center;">
                        <div style="font-size: 16px; font-weight: 600; color: #444;">{coin}</div>
                        <div style="font-size: 20px; font-weight: bold; color: #008080;">{value}</div>
                    </div>
                """, unsafe_allow_html=True)

        summary_df = pd.DataFrame({
        "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤": coin_types,
        "‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à": percent_success.map("{:.2f}%".format),
        "‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£": percent_remaining.map("{:.2f}%".format),
        "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)": reserve.map("{:,.2f}".format)
            })
    with st.expander("üìã ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", expanded=False):
        st.markdown("### üìÜ ‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)")
        st.dataframe(df_real, use_container_width=True)
        st.download_button(
            "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (CSV)",
            df_real.to_csv(index=False).encode("utf-8-sig"),
            file_name="monthly_production.csv",
            mime="text/csv"
        )

        st.markdown("### üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
        st.dataframe(summary_df, use_container_width=True)
        st.download_button(
            "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏£‡∏∏‡∏õ (CSV)",
            summary_df.to_csv(index=False).encode("utf-8-sig"),
            file_name="summary_success_reserve.csv",
            mime="text/csv"
        )