import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

def render():
    years = [
        "2552", "2553", "2554", "2555", "2556", "2557", "2558", "2559",
        "2560", "2561", "2562", "2563", "2564", "2565", "2566", "2567", "2568"
    ]

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (‡∏£‡∏ß‡∏° "‡∏£‡∏ß‡∏°")
    coin_types = [
        "10 ‡∏ö‡∏≤‡∏ó", "5 ‡∏ö‡∏≤‡∏ó", "2 ‡∏ö‡∏≤‡∏ó", "1 ‡∏ö‡∏≤‡∏ó", "50 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå",
        "25 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "10 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "5 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "1 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "‡∏£‡∏ß‡∏°"
    ]

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó
    # (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    data_million_coins = [
        [None, 1337.7921, 1499.677, 1612.781, 1729.077, 1803.037, 1895.132, 2009.078, 2144.085, 2343.823, 2496.777, 2641.769, 2698.103, 2800.055, 2873.094, 2925.436311, 2980.658888],
        [1873.278, 2012.784, 1772.773, 1761.385, 1762.54, 2877.359, 3082.384, 3310.498, 3575.428, 3904.602, 4169.741, 4383.859, 4509.694, 4706.231, 4812.847, 4871.367846, 4955.104318],
        [520.132, 733.596, 319.476, 312.211, 297.9, 1421.558, 1515.014, 1633.013, 1977.876, 2204.312, 2349.362, 2443.312, 2478.047, 2522.201, 2533.981, 2507.315504, 2503.202481],
        [10144.114, 10611.092, 9946.685, 9853.209, 9820.451, 13947.534, 14715.937, 15448.273, 16356.487, 17170.895, 17911.568, 18580.931, 19093.956, 19824.894, 20526.77, 20979.42582, 21316.24875],
        [1771.552, 1822.81, 1704.209, 1708.987, 1695.14, 2337.411, 2469.999, 2598.005, 2704.504, 2879.266, 3010.8, 3119.236, 3215.435, 3292.333, 3364.652, 3434.531056, 3470.871125],
        [2576.972, 2661.76, 2389.899, 2366.968, 2358.395, 3424.792, 3711.313, 3962.188, 4131.874, 4417.04, 4663.24, 4894.037, 5052.116, 5213.989, 5369.503, 5532.83046, 5622.437902],
        [6.25, 6.452, 6.437, 6.437, 6.437, 6.465, 6.465, 6.465, 6.465, 6.465, 6.465, 6.465, 6.465, 6.465, 6.465, 6.465, 6.465],
        [6.42, 6.398, 6.383, 6.383, 6.383, 6.408, 6.408, 6.408, 6.408, 6.408, 6.408, 6.408, 6.408, 6.408, 6.408, 6.408, 6.408],
        [None, 6.174, 6.159, 6.159, 6.159, 6.159, 6.159, 6.184, 6.184, 6.184, 6.184, 6.184, 6.184, 6.184, 6.184, 6.184, 6.184],
        [16898.718, 19198.8581, 17651.698, 17634.52, 17682.482, 25830.723, 27408.811, 28980.112, 30909.311, 32938.995, 34620.545, 36082.201, 37066.408, 38378.76, 39499.904, 40269.964, 40867.58047]
    ]

    data_million_baht = [
        [None, 13377.921, 14996.77, 16127.81, 17290.77, 18030.37, 18951.32, 20090.78, 21440.85, 23438.23, 24967.77, 26417.69, 26981.032, 28000.55, 28730.936, 29254.36311, 29806.58888],
        [9366.39, 10063.92, 8863.865, 8806.925, 8812.7, 14386.795, 15411.92, 16552.49, 9153.205, 19523.01, 20848.705, 21919.296, 22548.472, 23531.155, 24064.236, 24356.83923, 24775.52159],
        [1040.264, 1467.192, 638.952, 624.422, 595.8, 2843.116, 3030.028, 3266.026, 845.972, 4408.624, 4698.724, 4886.624, 4956.094, 5044.402, 5067.962, 5014.631008, 5006.404962],
        [10144.114, 10611.092, 9946.685, 9853.209, 9820.451, 13947.534, 14715.937, 15448.273, 10025.223, 17170.895, 17911.568, 18580.931, 19093.956, 19824.894, 20526.77, 20979.42582, 21316.24875],
        [885.776, 911.405, 852.1045, 854.4935, 847.57, 1168.7055, 1234.9995, 1299.0025, 900.555, 1439.633, 1505.4, 1559.618, 1607.7175, 1646.1665, 1682.326, 1717.265528, 1735.435563],
        [644.243, 665.44, 597.47475, 591.741, 589.59875, 856.198, 535.01, 990.547, 579.19375, 1104.26, 1165.81, 1223.50925, 1263.029, 1303.49725, 1342.376, 1383.207615, 1405.609476],
        [0.625, 0.645, 0.6437, 0.6437, 0.6437, 0.6465, 0.6465, 0.6465, 0.644, 0.6465, 0.6465, 0.6465, 0.6465, 0.6465, 0.6465, 0.6465, 0.6465],
        [0.321, 0.32, 0.31915, 0.31915, 0.31915, 0.3204, 0.3204, 0.3204, 0.31915, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204],
        [None, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.06184, 0.06184],
        [22081.733, 37097.997, 35896.8761, 36859.62535, 37957.9146, 51233.748, 54263.127, 57648.148, 62016.479, 67085.6809, 71099.0059, 74588.69715, 76451.3294, 79351.69365, 81415.6349, 82706.76105, 84046.83796]
    ]

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
    columns = ["‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"] + [f"{year}_‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç" for year in years] + [f"{year}_‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó" for year in years]
    data = []
    for i, coin in enumerate(coin_types):
        row = [coin] + data_million_coins[i] + data_million_baht[i]
        data.append(row)

    df = pd.DataFrame(data, columns=columns)

    # Melt
    df_melt_coin = df.melt(id_vars="‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤", value_vars=[f"{y}_‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç" for y in years], var_name="‡∏õ‡∏µ", value_name="‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç")
    df_melt_coin["‡∏õ‡∏µ"] = df_melt_coin["‡∏õ‡∏µ"].str.replace("_‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", "")

    df_melt_baht = df.melt(id_vars="‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤", value_vars=[f"{y}_‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó" for y in years], var_name="‡∏õ‡∏µ", value_name="‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó")
    df_melt_baht["‡∏õ‡∏µ"] = df_melt_baht["‡∏õ‡∏µ"].str.replace("_‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó", "")

    # Filter options
    st.title("üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à")
    year_options = {"3 ‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î": years[-3:], "5 ‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î": years[-5:], "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": years}
    year_range = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á:", list(year_options.keys()), horizontal=True)
    selected_years = year_options[year_range]

    # Filter data
    df_coin_filtered = df_melt_coin[df_melt_coin["‡∏õ‡∏µ"].isin(selected_years)]
    df_baht_filtered = df_melt_baht[df_melt_baht["‡∏õ‡∏µ"].isin(selected_years)]

    # Tabs
    tab1, tab2 = st.tabs(["‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", "‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó"])

    with tab1:
        fig1 = px.bar(
            df_coin_filtered,
            x="‡∏õ‡∏µ",
            y="‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç",
            color="‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤",
            barmode="group",
            title=f"‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏£‡∏ß‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏µ {' - '.join([selected_years[0], selected_years[-1]])} (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)",
            text_auto=True
        )
        fig1.update_traces(texttemplate='%{y:,.2f}', textposition='outside')
        st.plotly_chart(fig1, use_container_width=True)
        with st.expander("üìÑ ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)"):
            st.dataframe(df_coin_filtered, use_container_width=True)

    with tab2:
        fig2 = px.bar(
            df_baht_filtered,
            x="‡∏õ‡∏µ",
            y="‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó",
            color="‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤",
            barmode="group",
            title=f"‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏µ {' - '.join([selected_years[0], selected_years[-1]])} (‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)",
            text_auto=True
        )
        fig2.update_traces(texttemplate='%{y:,.2f}', textposition='outside')
        st.plotly_chart(fig2, use_container_width=True)
        with st.expander("üìÑ ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)"):
            st.dataframe(df_baht_filtered, use_container_width=True)
