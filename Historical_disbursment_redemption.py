import pandas as pd
import plotly.express as px
import streamlit as st
import plotly.graph_objects as go

def render():
    st.title("‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df3 = pd.read_csv("‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á+hub.csv")
    
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏£‡∏ß‡∏°' ‡πÄ‡∏õ‡πá‡∏ô '‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å'
    df3 = df3.rename(columns={"‡∏£‡∏ß‡∏°": "‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å"})
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å ‡∏û.‡∏®. ‚Üí ‡∏Ñ.‡∏®. ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á datetime object
    df3['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] = df3['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'].apply(lambda x: f"{int(x.split('/')[2])-543}-{x.split('/')[0]}-{x.split('/')[1]}")
    df3['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] = pd.to_datetime(df3['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'], format='%Y-%m-%d')
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á label ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    thai_months = {
        '1': '‡∏°.‡∏Ñ.', '2': '‡∏Å.‡∏û.', '3': '‡∏°‡∏µ.‡∏Ñ.', '4': '‡πÄ‡∏°.‡∏¢.', '5': '‡∏û.‡∏Ñ.', '6': '‡∏°‡∏¥.‡∏¢.',
        '7': '‡∏Å.‡∏Ñ.', '8': '‡∏™.‡∏Ñ.', '9': '‡∏Å.‡∏¢.', '10': '‡∏ï.‡∏Ñ.', '11': '‡∏û.‡∏¢.', '12': '‡∏ò.‡∏Ñ.'
    }
    df3['label'] = df3['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'].apply(lambda x: thai_months[f"{(x.month)}"] + str(x.year + 543))
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    df3['‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì'] = df3['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'].apply(lambda x: x.year + 544 if x.month >= 10 else x.year + 543)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    selected_years = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:", sorted(df3['‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì'].unique()), default=sorted(df3['‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì'].unique()))
    df3 = df3[df3['‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì'].isin(selected_years)]
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á
    df3['‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á'] = df3['‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å'] - df3['‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô']
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏•‡πá‡∏≠‡∏ï
    cols_to_convert = ['‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å', '‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô', '‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á']
    df3[cols_to_convert] = df3[cols_to_convert].apply(pd.to_numeric, errors='coerce')
    
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏•‡πâ‡∏≤‡∏ô
    def format_million(v):
        return f"{v / 1_000_000:,.2f}M"
    
    # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏Å‡∏£‡∏≤‡∏ü
    chart_type = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏£‡∏≤‡∏ü:", ["‡πÄ‡∏™‡πâ‡∏ô (Line Chart)", "‡πÅ‡∏ó‡πà‡∏á (Bar Chart)"])
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    fig3 = go.Figure()
    
    if chart_type == "‡πÄ‡∏™‡πâ‡∏ô (Line Chart)":
        fig3.add_trace(go.Scatter(
            x=df3['label'], y=df3['‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å'], mode='lines+markers+text', name='‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å',
            text=[format_million(v) for v in df3['‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å']], textposition='top center'
        ))
        fig3.add_trace(go.Scatter(
            x=df3['label'], y=df3['‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô'], mode='lines+markers+text', name='‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô',
            text=[format_million(v) for v in df3['‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô']], textposition='top center'
        ))
        fig3.add_trace(go.Scatter(
            x=df3['label'], y=df3['‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á'], mode='lines+markers+text', name='‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á',
            text=[format_million(v) for v in df3['‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á']], textposition='top center'
        ))
    else:
        fig3.add_trace(go.Bar(
            x=df3['label'], y=df3['‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å'], name='‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å',
            text=[format_million(v) for v in df3['‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å']], textposition='outside'
        ))
        fig3.add_trace(go.Bar(
            x=df3['label'], y=df3['‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô'], name='‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô',
            text=[format_million(v) for v in df3['‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô']], textposition='outside'
        ))
        fig3.add_trace(go.Bar(
            x=df3['label'], y=df3['‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á'], name='‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á',
            text=[format_million(v) for v in df3['‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á']], textposition='outside'
        ))
        fig3.update_layout(barmode='group')
    
    fig3.update_layout(
        title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (‡∏´‡∏ô‡πà‡∏ß‡∏¢)",
        hovermode="x unified",
        xaxis=dict(showgrid=True),
        yaxis=dict(showgrid=True)
    )
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ú‡πà‡∏≤‡∏ô Streamlit
    st.plotly_chart(fig3, use_container_width=True)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    with st.expander("üìÑ ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Å‡∏©‡∏≤‡∏õ‡∏ì‡πå‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2563 ‡∏ñ‡∏∂‡∏á 2567"):
        st.dataframe(df3, use_container_width=True)
        csv_data = df3.to_csv(index=False).encode('utf-8-sig')
        st.download_button("üìÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (CSV)", csv_data, file_name="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç.csv", key="download1")

    
    st.title("üìä ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Å‡∏©‡∏≤‡∏õ‡∏ì‡πå‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2563 ‡∏ñ‡∏∂‡∏á 2567")
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df2 = pd.read_csv("‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á+hub.csv")

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
    df2["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"] = df2["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].astype(str)

    # Melt ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö plotly
    value_vars2 = ["10 ‡∏ö‡∏≤‡∏ó", "5 ‡∏ö‡∏≤‡∏ó", "2 ‡∏ö‡∏≤‡∏ó", "1 ‡∏ö‡∏≤‡∏ó", "50 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "25 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå"]
    df2_melted = df2.melt(id_vars=["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"], value_vars=value_vars2, 
                        var_name="‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤", value_name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô")

    # ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏Ñ‡πà‡∏≤ NaN ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
    df2_melted.dropna(subset=["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"], inplace=True)
    df2_melted["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)"] = df2_melted["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"] / 1_000_000

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏õ‡∏µ
    summary_df2 = df2_melted.groupby(["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"], as_index=False)["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)"].sum()

    # ‡πÄ‡∏û‡∏¥‡πà‡∏° customdata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hover (‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏ô)
    customdata_df2 = df2_melted.groupby(["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"], as_index=False)["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum()
    summary_df2 = pd.merge(summary_df2, customdata_df2, on=["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"])

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á color map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    unique_years = summary_df2["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].unique()
    color_map = {year: px.colors.qualitative.Plotly[i % len(px.colors.qualitative.Plotly)] for i, year in enumerate(sorted(unique_years))}

    # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤
    coin_order = ["10 ‡∏ö‡∏≤‡∏ó", "5 ‡∏ö‡∏≤‡∏ó", "2 ‡∏ö‡∏≤‡∏ó", "1 ‡∏ö‡∏≤‡∏ó", "50 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "25 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå"]

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü facet bar ‡∏à‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° ‡πÇ‡∏î‡∏¢‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
    fig2 = px.bar(summary_df2, 
                x="‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)", color="‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", 
                facet_col="‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤",
                category_orders={"‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤": coin_order},
                color_discrete_map=color_map,
                title="üìä ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Å‡∏©‡∏≤‡∏õ‡∏ì‡πå‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2563 ‡∏ñ‡∏∂‡∏á 2567",
                labels={"‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì": "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)", "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤": "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"},
                custom_data=["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"],
                hover_data=[])

    fig2.update_layout(height=700)
    fig2.update_xaxes(type='category', categoryorder='category ascending')
    fig2.update_traces(
        texttemplate='%{y:,.2f}M',
        textposition='outside',
        hovertemplate="‡∏õ‡∏µ: %{x}<br>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: %{y:,.2f}M ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"
    )

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô Streamlit
    st.plotly_chart(fig2, use_container_width=True)

    with st.expander("üìÑ ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Å‡∏©‡∏≤‡∏õ‡∏ì‡πå‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2563 ‡∏ñ‡∏∂‡∏á 2567"):
        st.dataframe(summary_df2, use_container_width=True)
        csv2 = summary_df2.to_csv(index=False).encode('utf-8-sig')
        st.download_button("üìÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (CSV)", csv2, file_name="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç.csv", key="download2")


    data = pd.read_csv("‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á+HUB.csv")

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    df = pd.DataFrame(data)
    df.columns = [x.replace('_', ' ') for x in df.columns]

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö datetime (‡∏à‡∏≤‡∏Å ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.)
    def thai_to_gregorian(date_str):
        day, month, year_th = map(int, date_str.split('/'))
        return pd.Timestamp(year_th - 543, month, day)

    df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] = df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].apply(thai_to_gregorian)

    if "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì" in df.columns:
        df["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"] = df["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].astype(str)
    else:
        def extract_fiscal_year(date):
            year = date.year
            return str(year + 1 + 543) if date.month >= 10 else str(year + 543)
        df["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"] = df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].apply(extract_fiscal_year)

    all_cols = [col for col in df.columns if any(word in col for word in ["‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ", "‡∏ä‡∏≥‡∏£‡∏∏‡∏î"])]
    df_summary = df.groupby("‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")[all_cols].sum().reset_index()

    df_melted = df_summary.melt(id_vars="‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", var_name="‡∏ä‡∏ô‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", value_name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô")
    df_melted["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = df_melted["‡∏ä‡∏ô‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"].apply(lambda x: "‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" if "‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" in x else "‡∏ä‡∏≥‡∏£‡∏∏‡∏î")
    df_melted["‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"] = df_melted["‡∏ä‡∏ô‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"].apply(lambda x: x.split(" ")[0])

    df_total = df_melted.groupby(["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"])["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index(name="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°")
    df_hover = df_melted.pivot_table(index=["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"], columns="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", aggfunc="sum").reset_index().fillna(0)
    df_combined = pd.merge(df_total, df_hover, on=["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"])
    df_combined["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô M"] = df_combined["‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°"] / 1_000_000
    df_combined["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"] = df_combined["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô M"].map(lambda x: f"{x:,.2f} M")

    facet_order = ["10", "5", "2", "1", "50", "25"]
    fig = px.bar(
        df_combined,
        x="‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",
        y="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°",
        facet_col="‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç",
        category_orders={"‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç": facet_order},
        text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
        color="‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",
        title="üìä ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Å‡∏©‡∏≤‡∏õ‡∏ì‡πå ‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2563 ‡∏ñ‡∏∂‡∏á 2567",
        height=700,
        custom_data=["‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ", "‡∏ä‡∏≥‡∏£‡∏∏‡∏î"]
    )

    fig.update_traces(
        textposition='outside',
        hovertemplate="‡∏õ‡∏µ: %{x}<br>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: %{y:,.2f} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç<br>‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ: %{customdata[0]:,.2f} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç<br>‡∏ä‡∏≥‡∏£‡∏∏‡∏î: %{customdata[1]:,.2f} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"
    )

    fig.update_layout(xaxis_title="‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç")
    fig.update_xaxes(type='category', tickmode='linear', showticklabels=True)
    st.plotly_chart(fig, use_container_width=True)

    with st.expander("üìã ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Å‡∏©‡∏≤‡∏õ‡∏ì‡πå ‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2563 ‡∏ñ‡∏∂‡∏á 2567", key="download3"):
        st.dataframe(df_combined, use_container_width=True)
     
def figures():
    df2 = pd.read_csv("‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á+hub.csv")

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
    df2["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"] = df2["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].astype(str)

    # Melt ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö plotly
    value_vars2 = ["10 ‡∏ö‡∏≤‡∏ó", "5 ‡∏ö‡∏≤‡∏ó", "2 ‡∏ö‡∏≤‡∏ó", "1 ‡∏ö‡∏≤‡∏ó", "50 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå", "25 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå"]
    df2_melted = df2.melt(id_vars=["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"], value_vars=value_vars2, 
                        var_name="‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤", value_name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô")

    # ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏Ñ‡πà‡∏≤ NaN ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
    df2_melted.dropna(subset=["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"], inplace=True)
    df2_melted["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)"] = df2_melted["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"] / 1_000_000

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏õ‡∏µ
    summary_df2 = df2_melted.groupby(["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"], as_index=False)["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)"].sum()

    # ‡πÄ‡∏û‡∏¥‡πà‡∏° customdata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hover (‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏ô)
    customdata_df2 = df2_melted.groupby(["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"], as_index=False)["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum()
    summary_df2 = pd.merge(summary_df2, customdata_df2, on=["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"])

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á color map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    unique_years = summary_df2["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].unique()
    color_map = {year: px.colors.qualitative.Plotly[i % len(px.colors.qualitative.Plotly)] for i, year in enumerate(sorted(unique_years))}

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü facet bar ‡∏à‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° ‡πÇ‡∏î‡∏¢‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
    fig2 = px.bar(summary_df2, 
                x="‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)", color="‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", 
                facet_col="‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤",
                color_discrete_map=color_map,
                title="üìä ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Å‡∏©‡∏≤‡∏õ‡∏ì‡πå‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2563 ‡∏ñ‡∏∂‡∏á 2567",
                labels={"‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì": "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏•‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)", "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤": "‡∏ä‡∏ô‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"},
                custom_data=["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"],
                hover_data=[])

    fig2.update_layout(height=700)
    fig2.update_xaxes(type='category', categoryorder='category ascending')
    fig2.update_traces(
        texttemplate='%{y:,.2f}M',
        textposition='outside',
        hovertemplate="‡∏õ‡∏µ: %{x}<br>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: %{y:,.2f}M ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"
    )
    # with st.expander("üìÑ ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Å‡∏©‡∏≤‡∏õ‡∏ì‡πå‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2563 ‡∏ñ‡∏∂‡∏á 2567"):
    #     st.dataframe(summary_df2, use_container_width=True)
    #     csv2 = summary_df2.to_csv(index=False).encode('utf-8-sig')
    #     st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (CSV)", csv2, file_name="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç.csv")

    data = pd.read_csv("‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á+HUB.csv")

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    df = pd.DataFrame(data)
    df.columns = [x.replace('_', ' ') for x in df.columns]

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö datetime (‡∏à‡∏≤‡∏Å ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.)
    def thai_to_gregorian(date_str):
        day, month, year_th = map(int, date_str.split('/'))
        return pd.Timestamp(year_th - 543, month, day)

    df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] = df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].apply(thai_to_gregorian)

    if "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì" in df.columns:
        df["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"] = df["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].astype(str)
    else:
        def extract_fiscal_year(date):
            year = date.year
            return str(year + 1 + 543) if date.month >= 10 else str(year + 543)
        df["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"] = df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].apply(extract_fiscal_year)

    # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    df["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"] = df["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].astype(str)

    all_cols = [col for col in df.columns if any(word in col for word in ["‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ", "‡∏ä‡∏≥‡∏£‡∏∏‡∏î"])]
    df_summary = df.groupby("‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")[all_cols].sum().reset_index()

    df_melted = df_summary.melt(id_vars="‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", var_name="‡∏ä‡∏ô‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", value_name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô")
    df_melted["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = df_melted["‡∏ä‡∏ô‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"].apply(lambda x: "‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" if "‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ" in x else "‡∏ä‡∏≥‡∏£‡∏∏‡∏î")
    df_melted["‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"] = df_melted["‡∏ä‡∏ô‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"].apply(lambda x: x.split(" ")[0])

    df_total = df_melted.groupby(["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"])["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index(name="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°")
    df_hover = df_melted.pivot_table(index=["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"], columns="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", aggfunc="sum").reset_index().fillna(0)
    df_combined = pd.merge(df_total, df_hover, on=["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"])
    df_combined["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô M"] = df_combined["‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°"] / 1_000_000
    df_combined["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"] = df_combined["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô M"].map(lambda x: f"{x:,.2f} M")

    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏´‡πâ‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    df_combined["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"] = df_combined["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].astype(str).apply(lambda x: x.split(".")[0])

    facet_order = ["10", "5", "2", "1", "50", "25"]
    fiscal_order = sorted(df_combined["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].unique())

    fig = px.bar(
        df_combined,
        x="‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",
        y="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°",
        facet_col="‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç",
        category_orders={"‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç": facet_order, "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì": fiscal_order},
        text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
        color="‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",
        title="\ud83d\udcca ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Å‡∏©‡∏≤‡∏õ‡∏ì‡πå ‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2563 ‡∏ñ‡∏∂‡∏á 2567",
        height=700,
        custom_data=["‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ", "‡∏ä‡∏≥‡∏£‡∏∏‡∏î"]
    )

    fig.update_traces(
        textposition='outside',
        hovertemplate="‡∏õ‡∏µ: %{x}<br>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: %{y:,.2f} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç<br>‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ: %{customdata[0]:,.2f} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç<br>‡∏ä‡∏≥‡∏£‡∏∏‡∏î: %{customdata[1]:,.2f} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"
    )

    fig.update_layout(xaxis_title="‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç")
    fig.update_xaxes(type='category', tickmode='linear', showticklabels=True)

    # with st.expander("üìã ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Å‡∏©‡∏≤‡∏õ‡∏ì‡πå ‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2563 ‡∏ñ‡∏∂‡∏á 2567"):
        # st.dataframe(df_combined, use_container_width=True)

    return fig, fig2
